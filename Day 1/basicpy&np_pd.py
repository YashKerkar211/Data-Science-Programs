# -*- coding: utf-8 -*-
"""BasicPy&Np/Pd.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e8biaNhmSSF0i30Mdhwa-fAFyBQtu-eR
"""

x=5
m=6
y="9"
z="2"
print(type(x))
print(type(y))
print(x+m)
print(y+z)

#typecasting
a=int(z)
print(a+m)
''' is used for
multi line
comment  '''

# List:- ordered collection of items, changeable, it allows duplicate values
l1=[56,"hello",True,56.2,["Yash","Viraj"]]
print(l1)
l2=l1[4][-2][0:3]
print(l2)
print(len(l1))
print(len(l2))
l1.append("Shlok")
l1.insert(1,"Ankit")
l1.pop(2)
print(l1)

#Tuple: It is a immutable dataype.
t1=(6,7,"Yash")
print(t1)

#Dict
d1={"Name":"Yash","Proff":"Student"}
print(d1.keys())
print(d1.items())
print(d1.values())
print(d1['Name'])

#input
num1=int(input("Enter a number:"))
a=input("Enter the operator (+,-)")
num2=int(input("Enter second number:"))
if a=="+":
  print(num1+num2)
elif a=='-':
  print(num1-num2)
else:
  print("Invalid")

#Numpy
import numpy as np

# Array with rank 1
arr=np.array([[7,8,9]])
# Array with rank 2
arr=np.array([[7,8,9] ,["hello",True,56.7]])

#Printing array
print(arr)

#Printing array dimensions (axes)
print("No. of dimensions",arr.ndim)

#Printing shape of array
print("Shape of array:",arr.shape)

#Printing size (total number of elements) of array
print("Size of array:",arr.size)

#Printing type of elements in array
print("Array stores elements of type:",arr.dtype)
print("Array is of type:",type(arr))

# Creating an array from tuple
arr=np.array((1,3,2))
print(type(arr))

import numpy as np

#creating array
arr=np.array([2,4,6,8,10])

#creating copy of array
c=arr.copy()

#both arr and c have different id
print("id of arr",id(arr))
print("id of c",id(c))

#changing original array
#this will not affect copy
arr[0]=67

#printing array and copy
print("original array:",arr)

print("copy:",c)

def sum(array):
  sum=0
  for i in array:
    sum+=i
  return sum

testArray=[1,2,3,4]

print('The sum of your number is '+str(sum(testArray)))

import numpy as np
a=np.arange(10,1,-2)
newarr=a[np.array([3,1,2])]  #fancy indexing in numpy
print("\n Element at these indices are:\n",newarr)

import numpy as np
arr=np.array([1,2,3,4,5])
x=arr.copy()
arr[0]=42
print(arr)
print(x)

import numpy as np
arr=np.array([1,2,3,4,5])
x=arr.view()
arr[0]=42
print(arr)
print(x)

#The result includes the start index, but excludes the end index

import numpy as np
arr=np.array([1,2,3,4,5,6,7])
print(arr[1:5])
print(arr[4:])
print(arr[-3:-1])
print(arr[1:5:2])
print(arr[::2])

import numpy as np
arr=np.array([[1,2,3,4,5],[6,7,8,9,10]])
print(arr[1,1:4])
print(arr[0:2,2])
print(arr[0:2,1:4])

#The copy is not affected by the changes made to the original array
import numpy as np
arr=np.array([1,2,3,4,5])
x=arr.copy()
arr[0]=42
print(arr)
print(x)

#The copy is affected by the changes made to the original array
import numpy as np
arr=np.array([1,2,3,4,5])
x=arr.view()
arr[0]=42
print(arr)
print(x)

#Check if array owns its data
#copies owns the data, and views does not own the data

import numpy as np
arr=np.array([1,2,3,4,5])
x=arr.copy()
y=arr.view()

print(x.base)
print(y.base)

import numpy as np
arr=np.array([[1,2,3,4],[5,6,7,8]])
print(arr.shape)

#Create an array with 5 dimensions using ndim
#using a vector with values 1,2,3,4 and verify that last dimension has value 4:
import numpy as np

arr=np.array([1,2,3,4],ndmin=5)
print(arr)
print('shape of array:',arr.shape)

#Convert the following 1-D array with 12 elements into a 2-D array

arr=np.array([1,2,3,4,5,6,7,8,9,10,11,12])
newarr=arr.reshape(4,3)
print(newarr)

newarr=arr.reshape(2,3,2)
print(newarr)

import numpy as np

x=np.array([[1,2],[4,5]])
y=np.array([[7,8],[9,10]])
print(np.add(x,y))
print()
print(np.subtract(x,y))
print()
print(np.multiply(x,y))
print()
print(np.divide(x,y))

import pandas as pd

mydataset={
    'Owner Name':"Yash Kerkar",
    'Cars':["BMW","Lambo"]
}

myvar=pd.DataFrame(mydataset)
print(myvar)

#Version string of Pandas
import pandas as pd
print(pd.__version__)

#a pandas series is like a column in a table
import pandas as pd
a=[1,7,2]
myvar=pd.Series(a)
print(myvar)
print(myvar[1])

import pandas as pd
a=["India","America","UK"]
myvar=pd.Series(a,index=["a","b","c"])
print(myvar)
print(myvar['a'])

import pandas as pd
data={
    "calories":[420,340,780],
    "duration":[50,40,80]
}

#load data into a DataFrame object:
df=pd.DataFrame(data)
print(df)

#Pandas use the loc attribute to return one or more specified rows
print(df.loc[0])
print(df.loc[1])

import pandas as pd
df=pd.read_csv('Data.csv')
print(df.to_string())
#use to_string to print entire dataframe

#If you have a large DataFrame with many rows, pandas will only return and first and last 5 rows
import pandas as pd
df=pd.read_csv('Data.csv')
print(df)

import pandas as pd
print(pd.options.display.max_rows)
# The number of rows returned is defined in Pandas option settings.

import pandas as pd
pd.options.display.max_rows=9999
df=pd.read_csv('Data.csv')
print(df)
print(pd.options.display.max_rows)

#Load a Python dictionary into a DataFrame     JSON=Python Dictionary

import pandas as pd

data={
    "Duration":{
        "0":60,
        "1":60,
        "2":60,
        "3":60,
        "4":60,
        "5":60,
        "6":60,
        "7":60
    },
     "Pulses":{
        "0":110,
        "1":117,
        "2":103,
        "3":109,
        "4":117,
        "5":102
    },
     "Maxpulse":{
        "0":130,
        "1":145,
        "2":135,
        "3":175,
        "4":148,
        "5":127,
    },
     "Calories":{
        "0":409,
        "1":479,
        "2":340,
        "3":282,
        "4":406,
        "5":300
    }
}

df=pd.DataFrame(data)
print(df)

import pandas as pd

#creating first dataframe
df1=pd.DataFrame({"fruit":["apple","banana","mango"],
                  "market_price":[21,34,50]})
display("The first dataframe")
display(df1)

#creating second dataframe

df2=pd.DataFrame({"fruit":["banana","apple","strawberry"],
                 "wholesaler_price":[56,78,90]})
display("The second dataframe")
display(df2)

# Joining two DataFrames
display("The merged DataFrame:")
pd.merge(df1,df2,on="fruit",how="inner")
# how; {'left','right','outer','inner'}

#groupby() function is used to split the data into groups based on some criteria.
#Pandas objects can be split on any of their axes

import pandas as pd

#Creating the Dataframe
df=pd.read_csv("Cancer_data.csv")

print(df.head()) # head returns top 5 rows by default

gk=df.groupby('GeneticRisk')
gk.first()

gk.get_group(1).head()

#Indentation
j=1
while(j<=7):
  print(j)
  j+=1

  if(j==5):
      break